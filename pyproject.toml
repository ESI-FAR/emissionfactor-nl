[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
authors = [
    {name = "Bart Schilperoort", email = "b.schilperoort@esciencecenter.nl" },
    {name = "Thijs Vroegh", email = "thijs.vroegh@outlook.com" }
]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
description = "Forecasting the emission factor of the electricity in the Netherlands."
keywords = [
    "co2 emissions",
    "emission factor",
    "forecasting"
]
license = {file = "LICENSE"}
name = "emissionfactor-nl"
readme = {file = "README.md", content-type = "text/markdown"}
requires-python = ">=3.10"
version = "0.2.0"
dependencies = [
    "autogluon.timeseries",
    "pandas",
    "matplotlib",
    "openmeteo-requests",
    "requests-cache",
    "retry-requests"
]

[project.optional-dependencies]
dev = [
    "pytest",
    "ruff"
]

[project.urls]
Repository = "https://github.com/ESI-FAR/emissionfactor-nl"
Issues = "https://github.com/ESI-FAR/emissionfactor-nl/issues"

[tool.hatch.build]
exclude = [
  "tests", "docs"
]

[tool.hatch.build.targets.wheel]
packages = ["src/emissionfactor_nl"]

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.coverage.run]
branch = true
source = ["src/emissionfactor-nl"]
command_line = "-m pytest"

[tool.ruff]
line-length = 88
output-format = "concise"

[tool.ruff.lint]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Enable Pyflakes `E` and `F` codes by default.
select = ["ALL"]
ignore = [
    "ANN204", # Missing return type annotation for special (dunder) method
    "FBT",    # Using boolean function arguments
    "TD",     # TODOs
    "FIX001", # Resolve FIXMEs
    "FIX002", # Resolve TODOs
    "B028",   # No explicit `stacklevel` keyword argument found in warning
    # No docstrings required in the following cases
    "D100", # Missing module docstring
    "D104", # Missing public package docstring
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in `__init__`
    "PD901",
    "COM812",
]
pydocstyle.convention = "google"

[tool.ruff.lint.per-file-ignores]
# Tests can ignore a few extra rules
"tests/**.py" = [
    "ANN201", # Missing return type annotation for public function
    "PT011",  # Missing `match` parameter in `pytest.raises()`
    "S101",   # Use of assert is detected
]

[tool.ruff.lint.isort]
known-first-party = ["emissionfactor_nl"]
force-single-line = true
no-lines-before = ["future","standard-library","third-party","first-party","local-folder"]
